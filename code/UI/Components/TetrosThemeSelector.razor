@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]
@inherits Panel

@namespace TetrosEffect

<root>
    <label class="arrow" onclick=@Left>@("<")</label>
    <label class="theme" onclick=@Preview>@(Theme?.Name ?? "")</label>
    <label class="arrow" onclick=@Right>@(">")</label>
</root>

@code
{
	public TetrosTheme Theme { get; set; }

	List<TetrosTheme> Themes;
	int SelectedIndex = 0;

	protected override void OnAfterTreeRender(bool firstTime)
	{
		if(firstTime)
		{
			Themes = TetrosTheme.All;
			var theme = TetrosTheme.Find( TetrosSettings.Instance.Theme );
			if ( theme is null )
			{
				theme = Themes.FirstOrDefault( x => x.Name == "Piano" );
			}
			if(theme is not null)
			{
				SelectedIndex = Themes.IndexOf( theme );
				Theme = Themes[SelectedIndex];
			}
		}
    }

    void Left()
    {
        SelectedIndex--;
        if (SelectedIndex < 0)
            SelectedIndex = Themes.Count - 1;

        UpdateTheme();
    }

    void Right()
    {
        SelectedIndex++;
        if (SelectedIndex >= Themes.Count)
            SelectedIndex = 0;

        UpdateTheme();
    }

    void UpdateTheme()
    {
        Theme = Themes[SelectedIndex];
        TetrosSettings.Instance.Theme = Theme.ResourceId;
        TetrosSettings.Instance.Save();

        // TODO: Make this get the board that has the same player as the client
        var game = Game.ActiveScene.Components.GetInChildren<TetrosGameManager>();
        if(game is not null && game.IsSingleplayer)
        {
            foreach(var board in game.Boards)
            {
                board.StopMusic();
                board.Theme = Theme;
            }
        }
    }

    void Preview()
    {
        Sound.Play(Theme.MoveRightSound);
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine(Theme?.Name ?? "", SelectedIndex);
    }
}
