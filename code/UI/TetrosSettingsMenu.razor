@using System;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace TetrosEffect

<root>
	<h1>Settings</h1>
	<div class="settings">
		<div class="setting">
			<label>Music Volume</label>
			<SliderControl Value:bind="@TetrosSettings.Instance.MusicVolume" Min=@(0) Max=@(1) Step=@(0.01f) />
		</div>
		<div class="setting">
			<label>SFX Volume</label>
			<SliderControl Value:bind="@TetrosSettings.Instance.SfxVolume" Min=@(0) Max=@(1) Step=@(0.01f) />
		</div>
		<div class="setting">
			<label>Theme</label>
			<TetrosThemeSelector @ref="ThemeSelector" />
		</div>
		<div class="setting">
			<label>Next Blocks Shown</label>
			<SliderControl Value:bind="@TetrosSettings.Instance.NextBlocksShown" Min=@(0) Max=@(4) Step=@(1) />
		</div>
		<div class="setting">
			<label>Show Ghost</label>
			<SwitchControl Value:bind="@TetrosSettings.Instance.ShowGhost" />
		</div>
		<div class="setting">
			<label>Allow Hold</label>
			<SwitchControl Value:bind="@TetrosSettings.Instance.AllowHold" />
		</div>
		<div class="setting">
			<label>Board Nudging</label>
			<SwitchControl Value:bind="@TetrosSettings.Instance.BoardNudging" />
		</div>
		<div class="setting">
			<label>Line Clear Effects</label>
			<SwitchControl Value:bind="@TetrosSettings.Instance.ShowParticles" />
		</div>
	</div>
	<button class="btn" onclick=@Back>Back</button>
</root>

@code
{
	public bool IsVisible = false;
	float Alpha = 0f;

	TetrosThemeSelector ThemeSelector;

	void Back()
	{
		var mainMenu = Scene.Components.GetInDescendants<TetrosMainMenu>();
		if(mainMenu is not null)
		{
			mainMenu.IsVisible = true;
			mainMenu.AllVisible = true;
		}
		var pauseMenu = Scene.Components.GetInDescendants<TetrosPauseMenu>();
		if(pauseMenu is not null)
			pauseMenu.IsVisible = true;

		IsVisible = false;
	}

	protected override void OnUpdate()
	{
		if(IsVisible && Alpha < 1f)
		{
			Alpha += RealTime.Delta;
			Alpha = Math.Clamp(Alpha, 0f, 1f);
		}
		else if(!IsVisible && Alpha > 0f)
		{
			Alpha -= RealTime.Delta;
			Alpha = Math.Clamp(Alpha, 0f, 1f);
		}

		Panel.Style.Opacity = Alpha;
		SetClass("no-interact", Alpha < 1f);
	}

	protected override int BuildHash() => System.HashCode.Combine( "" );
}